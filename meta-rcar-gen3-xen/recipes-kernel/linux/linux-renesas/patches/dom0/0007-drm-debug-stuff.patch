From 06085017c66b8a2e330c35c2530fac11eb83f2f9 Mon Sep 17 00:00:00 2001
From: Andrii Anisov <andrii.anisov@gmail.com>
Date: Fri, 2 Dec 2016 16:52:01 +0200
Subject: [PATCH 7/8] drm debug stuff

---
 arch/arm64/mm/fault.c                | 2 ++
 drivers/gpu/drm/drm_gem_cma_helper.c | 3 ++-
 include/linux/dma-mapping.h          | 1 +
 mm/cma.c                             | 2 +-
 4 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/arch/arm64/mm/fault.c b/arch/arm64/mm/fault.c
index 5954881..5fe9b80 100644
--- a/arch/arm64/mm/fault.c
+++ b/arch/arm64/mm/fault.c
@@ -533,6 +533,8 @@ asmlinkage void __exception do_mem_abort(unsigned long addr, unsigned int esr,
 
 	pr_alert("Unhandled fault: %s (0x%08x) at 0x%016lx\n",
 		 inf->name, esr, addr);
+	__show_regs(regs);
+	WARN_ON(1);
 
 	info.si_signo = inf->sig;
 	info.si_errno = 0;
diff --git a/drivers/gpu/drm/drm_gem_cma_helper.c b/drivers/gpu/drm/drm_gem_cma_helper.c
index 4537664..af48f6a 100644
--- a/drivers/gpu/drm/drm_gem_cma_helper.c
+++ b/drivers/gpu/drm/drm_gem_cma_helper.c
@@ -114,6 +114,7 @@ struct drm_gem_cma_object *drm_gem_cma_create(struct drm_device *drm,
 
 	cma_obj->vaddr = dma_alloc_wc(cma_obj->dev, size, &cma_obj->paddr,
 				      GFP_KERNEL | __GFP_NOWARN);
+	DRM_DEBUG("cma_obj->paddr = 0x%016lx ->vaddr = 0x%016lx\n", cma_obj->paddr, cma_obj->vaddr);
 	if (!cma_obj->vaddr) {
 		dev_err(drm->dev, "failed to allocate buffer with size %zu\n",
 			size);
@@ -301,7 +302,7 @@ int drm_gem_cma_dumb_map_offset(struct drm_file *file_priv,
 	}
 
 	*offset = drm_vma_node_offset_addr(&gem_obj->vma_node);
-
+	DRM_DEBUG( "offset = 0x%016lx\n", *offset);
 	drm_gem_object_unreference_unlocked(gem_obj);
 
 	return 0;
diff --git a/include/linux/dma-mapping.h b/include/linux/dma-mapping.h
index 71c1b21..173d6b6 100644
--- a/include/linux/dma-mapping.h
+++ b/include/linux/dma-mapping.h
@@ -327,6 +327,7 @@ dma_mmap_attrs(struct device *dev, struct vm_area_struct *vma, void *cpu_addr,
 	BUG_ON(!ops);
 	if (ops->mmap)
 		return ops->mmap(dev, vma, cpu_addr, dma_addr, size, attrs);
+	printk("no ops->mmap \n");
 	return dma_common_mmap(dev, vma, cpu_addr, dma_addr, size);
 }
 
diff --git a/mm/cma.c b/mm/cma.c
index ea506eb..b11a814 100644
--- a/mm/cma.c
+++ b/mm/cma.c
@@ -246,7 +246,7 @@ int __init cma_declare_contiguous(phys_addr_t base,
 #else
 	highmem_start = __pa(high_memory);
 #endif
-	pr_debug("%s(size %pa, base %pa, limit %pa alignment %pa)\n",
+	pr_err("%s(size %pa, base %pa, limit %pa alignment %pa)\n",
 		__func__, &size, &base, &limit, &alignment);
 
 	if (cma_area_count == ARRAY_SIZE(cma_areas)) {
-- 
2.7.4

